{"version":3,"sources":["Components/Header.js","Components/States.js","Components/India.js","Components/World.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","variant","Brand","style","padding","href","Nav","className","to","Component","State","state","stateData","axios","get","then","response","setState","data","console","log","keys","Object","this","classname","Accordion","map","itm","ky","districts","districtData","total_active","total_confirm","total_deaths","total_recover","district_list","x","active","deceased","confirmed","recovered","ob","push","Card","Toggle","as","Button","eventKey","Collapse","Body","district_name","India","axiox","src","width","boxShadow","backgroundColor","borderRadius","color","Title","cases","Text","deaths","States","World","country","marginLeft","countryInfo","flag","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dcddfa1b.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Navbar,Nav} from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Header extends Component{\r\n    constructor(){\r\n        super();\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n             <Navbar  bg=\"dark\" variant=\"dark\">\r\n             <Navbar.Brand style={{padding:\"10px\"}} href=\"#home\">Covid 19</Navbar.Brand>\r\n                        <Nav className=\"mr-auto\">\r\n                        <Link className=\"nav-link\" to=\"/india\">India</Link>\r\n                        <Link className=\"nav-link\" to=\"/world\">World</Link>\r\n            </Nav>\r\n            </Navbar>\r\n           </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\nexport default Header;\r\n","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport {Accordion,Card,Button} from 'react-bootstrap';\r\n\r\nclass State extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            stateData: {}\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        axios.get(\"https://api.covid19india.org/state_district_wise.json\").then(response=>{\r\n            this.setState({stateData:response.data});\r\n            console.log(response.data);\r\n\r\n        });\r\n    }\r\n    render(){\r\n      let keys = Object.keys(this.state.stateData);\r\n       return(\r\n        <div className=\"row\">\r\n            <div classname=\"col-md-12\">\r\n            <Accordion>\r\n              {\r\n                keys.map((itm,ky)=>{\r\n\r\n                  let districts = this.state.stateData[itm].districtData;\r\n                  let district_keys = Object.keys(districts);\r\n\r\n                  let total_active = 0;\r\n                  let total_confirm = 0;\r\n                  let total_deaths =0;\r\n                  let total_recover = 0;\r\n\r\n                  let district_list = [];\r\n\r\n                  for(let x in districts){\r\n                    total_active += districts[x].active;\r\n                    total_deaths += districts[x].deceased;\r\n                    total_confirm += districts[x].confirmed;\r\n                    total_recover += districts[x].recovered;\r\n                    let ob = districts[x];\r\n                    ob[\"district_name\"]= x;\r\n                    district_list.push(ob);\r\n                  }\r\n                  console.log(district_list);\r\n\r\n                  return(\r\n                    <Card>\r\n                    <Card.Header>\r\n                      <Accordion.Toggle as={Button} variant=\"primary\" eventKey={ky}>\r\n                        {itm}-<span className=\"btn-dark p-1 mr-2\">Total Cases - {total_confirm} </span>  \r\n                        <span className=\"btn-dark p-1 mr-2\">Active -{total_active} </span>\r\n                        <span className=\"btn-dark p-1 mr-2\">Recovered-{total_recover}</span> \r\n                        <span className=\"btn-dark p-1 mr-2\">Death-{total_deaths}</span>\r\n                      </Accordion.Toggle>\r\n                    </Card.Header>\r\n                    <Accordion.Collapse eventKey={ky}>\r\n                      <Card.Body>\r\n                        <table className=\"table table-bordered table-striped\">\r\n                          <thead>\r\n                            <tr>\r\n                              <td>District</td>\r\n                              <td>Confirmed Cases</td>\r\n                              <td>Active</td>\r\n                              <td>Recovered</td>\r\n                              <td>Deaths</td>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {\r\n                             district_list.map((itm,ky)=>{\r\n                              return(\r\n                                <tr>\r\n                                  <td>{itm.district_name}</td>\r\n                                  <td>{itm.confirmed}</td>\r\n                                  <td>{itm.active}</td>\r\n                                  <td>{itm.recovered}</td>\r\n                                   <td>{itm.deceased}</td>\r\n                                </tr>\r\n                              )\r\n                             })\r\n                            }\r\n                            \r\n                          </tbody>\r\n                        </table>\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n \r\n                  )\r\n                })\r\n              }\r\n \r\n              </Accordion>\r\n            </div>\r\n        </div>\r\n       )\r\n    }\r\n}\r\nexport default State;","import React, {Component} from 'react';\r\nimport {Card,Button,Badge} from 'react-bootstrap';\r\nimport States from './States';\r\nimport axiox from 'axios';\r\n\r\nclass India extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            data:{}\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        axiox.get(\"https://corona.lmao.ninja/v2/countries/india\").then(response=>{\r\n            this.setState({data:response.data});\r\n        });\r\n    }\r\n    render(){\r\n        \r\n        return(\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <img src=\"https://www.countryflags.io/in/shiny/64.png\"></img>\r\n                    <h3>INDIA</h3>\r\n                </div>\r\n                <div className=\"col-md-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                        <Card style={{ width: '18rem',boxShadow: \"9px 9px 9px #9E9E9E\",backgroundColor: 'BLUE' , borderRadius: '10px' }}>\r\n                            <Card.Body className=\"text-center\" style={{color: 'white'}}>\r\n                                <Card.Title>TOTAL CASES</Card.Title>\r\n                                 <h3>{this.state.data.cases}</h3>\r\n                                <Card.Text>\r\n                               \r\n                                </Card.Text>\r\n                            </Card.Body>\r\n                            </Card>\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                        <Card style={{ width: '18rem',boxShadow: \"9px 9px 9px #9E9E9E\",backgroundColor: 'yellow' , borderRadius: '10px'}}>\r\n                            <Card.Body className=\"text-center\" >\r\n                                <Card.Title>ACTIVE CASES</Card.Title>\r\n                                <h3>{this.state.data.active}</h3>\r\n                                <Card.Text>\r\n                                \r\n                                </Card.Text>\r\n                            </Card.Body>\r\n                            </Card>\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                        <Card style={{ width: '18rem',boxShadow: \"9px 9px 9px #9E9E9E\",backgroundColor: 'green', borderRadius: '10px' }}>\r\n                            <Card.Body className=\"text-center\" style={{color: 'white'}}>\r\n                                <Card.Title>RECOVERED</Card.Title>\r\n                                <h3>{this.state.data.recovered}</h3>\r\n                                <Card.Text>\r\n                               \r\n                                </Card.Text>\r\n                            </Card.Body>\r\n                            </Card>\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                        <Card style={{ width: '18rem',boxShadow: \"9px 9px 9px #9E9E9E\",backgroundColor: '#F32013', borderRadius: '10px' }}>\r\n                            <Card.Body className=\"text-center\" style={{color: 'white'}}>\r\n                                <Card.Title>DEATHS</Card.Title>\r\n                                <h3>{this.state.data.deaths}</h3>\r\n                                <Card.Text>\r\n                                \r\n                                </Card.Text>\r\n                            </Card.Body>\r\n                            </Card>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"col-md-12\" style={{padding:\"20px\"}}>\r\n                            <States/>\r\n                            \r\n                            \r\n                        </div>\r\n\r\n                      \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default India;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nclass World extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            data:[]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        axios.get(\"https://corona.lmao.ninja/v2/countries\").then(response=>{\r\n            this.setState({data:response.data});\r\n        });\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <table className=\"table table-primary table-bordered table-striped\">\r\n                        <thead>\r\n                            <tr>\r\n                                <td>Country</td>\r\n                                <td>Total Cases</td>\r\n                                <td>Recovered</td>\r\n                                <td>Death</td>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.data.map((itm,ky)=>{\r\n                                    return(\r\n                                      <tr>\r\n                                          <td>{itm.country}\r\n                                          <img style={{width:'64px' , marginLeft:'10px'}} src={itm.countryInfo.flag}/></td>\r\n                                          <td>{itm.cases}</td>\r\n                                          <td>{itm.recovered}</td>\r\n                                          <td>{itm.deaths}</td>\r\n                                      </tr>\r\n                                     \r\n                                    )\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default World;","\nimport React ,{Component}from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap';\nimport './App.css';\nimport Header from '../src/Components/Header';\nimport India from './Components/India.js';\nimport World from '../src/Components/World';\nimport State from '../src/Components/States';\nimport{\n  BrowserRouter as Router,\n  Link,\n  Route,\n  Switch \n} from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\n\nclass App extends Component{\n  constructor(){\n    super();\n  }\n  render(){\n    return(\n\n      <div>\n        <Router>\n        <Header/>\n        </Router>\n          <div className=\"container-fluid\">\n            <Router>\n              <Switch>\n                <Route exact path=\"/\">\n                  <India/>\n                </Route>\n                <Route path=\"/india\">\n                  <India/>\n                </Route>\n                <Route path=\"/world\">\n                  <World/>\n                </Route>\n              </Switch>\n            </Router>\n\n\n\n          </div>\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}